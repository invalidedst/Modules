#  _____                          
# |_   _|____  ____ _ _ __   ___  
#   | |/ _ \ \/ / _` | '_ \ / _ \ 
#   | | (_) >  < (_| | | | | (_) |
#   |_|\___/_/\_\__,_|_| |_|\___/ 
# meta banner: https://i.ibb.co/Z1RrLnfv/image-9708.jpg                               
# meta developer: @Toxano_Modules

from .. import loader, utils
from telethon.tl.types import Message
import random
import asyncio
import logging

logger = logging.getLogger(__name__)

@loader.tds
class CasinoMod(loader.Module):
    """–ú–æ–¥—É–ª—å –∫–∞–∑–∏–Ω–æ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–º–∏ –º–æ–Ω–µ—Ç–∞–º–∏"""

    strings = {
        "name": "Casino",
        "roulette_title": "üé∞ –†—É–ª–µ—Ç–∫–∞",
        "roulette_result": "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç: {} ({})",
        "dice_title": "üé≤ –ß–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ",
        "dice_result": "–í—ã–ø–∞–ª–æ: {} ({})",
        "russian_roulette_title": "üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞",
        "russian_roulette_result": "–†–µ–∑—É–ª—å—Ç–∞—Ç: {} ({})",
        "win": "üéâ <b>–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {} –º–æ–Ω–µ—Ç!</b>",
        "lose": "üò¢ <b>–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {} –º–æ–Ω–µ—Ç</b>",
        "current_balance": "üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {} –º–æ–Ω–µ—Ç",
        "not_enough_coins": "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏",
        "min_bet": "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10 –º–æ–Ω–µ—Ç",
        "invalid_bet": "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 10",
        "profile": (
            "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞</b>\n\n"
            "üëæ <b>–ù–∏–∫–Ω–µ–π–º:</b> {}\n"
            "üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {} –º–æ–Ω–µ—Ç\n"
            "‚ú® <b>–í—ã–∏–≥—Ä–∞–Ω–æ –≤—Å–µ–≥–æ:</b> {} –º–æ–Ω–µ—Ç\n"
            "üí∏ <b>–ü—Ä–æ–∏–≥—Ä–∞–Ω–æ –≤—Å–µ–≥–æ:</b> {} –º–æ–Ω–µ—Ç\n"
            "üèÜ <b>–†–µ–∫–æ—Ä–¥–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à:</b> {} –º–æ–Ω–µ—Ç\n\n"
            "üìä <b>–í–∏–Ω—Ä–µ–π—Ç:</b> {}%"
        ),
        "spinning": "üé∞ –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...",
        "playing_dice": "üé≤ –ë—Ä–æ—Å–∞–µ–º –∫–æ—Å—Ç–∏...",
        "shooting": "üî´ *—â–µ–ª—á–æ–∫*",
        "rr_shot": "üíÄ –ë–ê–•! –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!",
        "rr_survived": "üòÖ –í—ã –≤—ã–∂–∏–ª–∏ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏!",
        "dice_number": "üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {}",
        "even": "—á–µ—Ç–Ω–æ–µ",
        "odd": "–Ω–µ—á–µ—Ç–Ω–æ–µ",
    }
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "initial_coins",
                300,
                "–ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç",
                validator=loader.validators.Integer(minimum=100),
            ),
            loader.ConfigValue(
                "max_bet",
                1000000,
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞",
                validator=loader.validators.Integer(minimum=100),
            ),
        )

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
        self._coins = self.get("coins", self.config["initial_coins"])
        self._wins = self.get("wins", 0)
        self._losses = self.get("losses", 0)
        self._max_win = self.get("max_win", 0)
        self._games_played = self.get("games_played", 0)
        
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.set("coins", self._coins)
        self.set("wins", self._wins)
        self.set("losses", self._losses)
        self.set("max_win", self._max_win)
        self.set("games_played", self._games_played)

    async def _validate_bet(self, bet: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞–≤–∫–∏"""
        try:
            bet = int(bet)
            if bet < 10:
                return False
            if bet > self._coins:
                return False
            if bet > self.config["max_bet"]:
                return False
            return True
        except ValueError:
            return False

    @loader.command(ru_doc="–ò–≥—Ä–∞—Ç—å –≤ —Ä—É–ª–µ—Ç–∫—É")
    async def roulette(self, message: Message):
        """Play roulette"""
        await self.inline.form(
            message=message,
            text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
            reply_markup=[
                [{"text": "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "input": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", "handler": self._process_roulette_bet}],
                [{"text": "–û—Ç–º–µ–Ω–∞", "action": "close"}]
            ],
        )

    async def _process_roulette_bet(self, call, bet: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ"""
        if not await self._validate_bet(bet):
            await call.edit(
                self.strings("invalid_bet"),
                reply_markup=[[{"text": "üîô –ù–∞–∑–∞–¥", "action": "close"}]],
            )
            return

        bet = int(bet)
        
        colors = {
            "red": "üî¥",
            "black": "‚ö´Ô∏è",
            "green": "üíö",
        }

        await call.edit(
            "üé∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:",
            reply_markup=[
                [
                    {"text": f"{colors['red']} –ö—Ä–∞—Å–Ω–æ–µ (x2)", "callback": self._process_roulette_game, "args": (bet, "red")},
                    {"text": f"{colors['black']} –ß–µ—Ä–Ω–æ–µ (x2)", "callback": self._process_roulette_game, "args": (bet, "black")},
                ],
                [{"text": f"{colors['green']} –ó–µ—Ä–æ (x14)", "callback": self._process_roulette_game, "args": (bet, "green")}],
                [{"text": "üîô –ù–∞–∑–∞–¥", "action": "close"}],
            ],
        )

    async def _process_roulette_game(self, call, bet: int, color: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É"""
        await call.edit(self.strings("spinning"))
        await asyncio.sleep(3)

        result = random.choice(["red", "black"] * 18 + ["green"])
        number = random.randint(0, 36)

        multiplier = 14 if color == "green" else 2
        won = result == color

        if won:
            win_amount = bet * multiplier
            self._coins += win_amount
            self._wins += win_amount
            self._max_win = max(self._max_win, win_amount)
            result_text = self.strings("win").format(win_amount)
        else:
            self._coins -= bet
            self._losses += bet
            result_text = self.strings("lose").format(bet)

        self._games_played += 1
        self._save_stats()

        await call.edit(
            f"{result_text}\n"
            f"{self.strings('roulette_result').format(number, result)}\n"
            f"{self.strings('current_balance').format(self._coins)}",
            reply_markup=[
                [{"text": "üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "callback": self.roulette}],
                [{"text": "üîô –í—ã—Ö–æ–¥", "action": "close"}],
            ],
        )

    @loader.command(ru_doc="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
    async def profile(self, message: Message):
        """View casino profile"""
        winrate = round(self._wins / max(1, self._games_played) * 100, 2)
        
        await self.inline.form(
            message=message,
            text=self.strings("profile").format(
                message.sender.first_name,
                self._coins,
                self._wins,
                self._losses,
                self._max_win,
                winrate
            ),
            reply_markup=[
                [
                    {"text": "üé∞ –†—É–ª–µ—Ç–∫–∞", "callback": self.roulette},
                    {"text": "üé≤ –ö–æ—Å—Ç–∏", "callback": self.dice},
                ],
                [{"text": "üî´ –†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞", "callback": self.russian_roulette}],
                [{"text": "üîô –ó–∞–∫—Ä—ã—Ç—å", "action": "close"}],
            ],
        )
    @loader.command(ru_doc="–ò–≥—Ä–∞ –≤ —á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ")
    async def dice(self, message: Message):
        """Play even/odd dice game"""
        await self.inline.form(
            message=message,
            text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
            reply_markup=[
                [{"text": "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "input": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", "handler": self._process_dice_bet}],
                [{"text": "–û—Ç–º–µ–Ω–∞", "action": "close"}]
            ],
        )

    async def _process_dice_bet(self, call, bet: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∏–≥—Ä–µ —á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ"""
        if not await self._validate_bet(bet):
            await call.edit(
                self.strings("invalid_bet"),
                reply_markup=[[{"text": "üîô –ù–∞–∑–∞–¥", "action": "close"}]],
            )
            return

        bet = int(bet)
        
        await call.edit(
            "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É:",
            reply_markup=[
                [
                    {"text": "2Ô∏è‚É£ –ß–µ—Ç–Ω–æ–µ (x2)", "callback": self._process_dice_game, "args": (bet, "even")},
                    {"text": "1Ô∏è‚É£ –ù–µ—á–µ—Ç–Ω–æ–µ (x2)", "callback": self._process_dice_game, "args": (bet, "odd")},
                ],
                [{"text": "üîô –ù–∞–∑–∞–¥", "action": "close"}],
            ],
        )

    async def _process_dice_game(self, call, bet: int, choice: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —á–µ—Ç–Ω–æ–µ/–Ω–µ—á–µ—Ç–Ω–æ–µ"""
        await call.edit(self.strings("playing_dice"))
        await asyncio.sleep(2)

        result = random.randint(1, 6)
        is_even = result % 2 == 0
        result_type = "even" if is_even else "odd"
        
        won = (choice == "even" and is_even) or (choice == "odd" and not is_even)
        
        if won:
            win_amount = bet * 2
            self._coins += win_amount
            self._wins += win_amount
            self._max_win = max(self._max_win, win_amount)
            result_text = self.strings("win").format(win_amount)
        else:
            self._coins -= bet
            self._losses += bet
            result_text = self.strings("lose").format(bet)

        self._games_played += 1
        self._save_stats()

        await call.edit(
            f"{result_text}\n"
            f"üé≤ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {result} ({'—á–µ—Ç–Ω–æ–µ' if is_even else '–Ω–µ—á–µ—Ç–Ω–æ–µ'})\n"
            f"{self.strings('current_balance').format(self._coins)}",
            reply_markup=[
                [{"text": "üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "callback": self.dice}],
                [{"text": "üîô –í—ã—Ö–æ–¥", "action": "close"}],
            ],
        )

    @loader.command(ru_doc="–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞")
    async def russian_roulette(self, message: Message):
        """Play Russian roulette"""
        await self.inline.form(
            message=message,
            text="üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:",
            reply_markup=[
                [{"text": "–°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", "input": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", "handler": self._process_rr_bet}],
                [{"text": "–û—Ç–º–µ–Ω–∞", "action": "close"}]
            ],
        )

    async def _process_rr_bet(self, call, bet: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É—Å—Å–∫–æ–π —Ä—É–ª–µ—Ç–∫–µ"""
        if not await self._validate_bet(bet):
            await call.edit(
                self.strings("invalid_bet"),
                reply_markup=[[{"text": "üîô –ù–∞–∑–∞–¥", "action": "close"}]],
            )
            return

        bet = int(bet)
        
        await call.edit(
            "üî´ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤:",
            reply_markup=[
                [
                    {"text": "1 –ø–∞—Ç—Ä–æ–Ω (x2)", "callback": self._process_rr_game, "args": (bet, 1)},
                    {"text": "2 –ø–∞—Ç—Ä–æ–Ω–∞ (x3)", "callback": self._process_rr_game, "args": (bet, 2)},
                ],
                [
                    {"text": "3 –ø–∞—Ç—Ä–æ–Ω–∞ (x4)", "callback": self._process_rr_game, "args": (bet, 3)},
                    {"text": "4 –ø–∞—Ç—Ä–æ–Ω–∞ (x5)", "callback": self._process_rr_game, "args": (bet, 4)},
                ],
                [
                    {"text": "5 –ø–∞—Ç—Ä–æ–Ω–æ–≤ (x6)", "callback": self._process_rr_game, "args": (bet, 5)},
                ],
                [{"text": "üîô –ù–∞–∑–∞–¥", "action": "close"}],
            ],
        )

    async def _process_rr_game(self, call, bet: int, bullets: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–≥—Ä—ã –≤ —Ä—É—Å—Å–∫—É—é —Ä—É–ª–µ—Ç–∫—É"""
        await call.edit(self.strings("shooting"))
        await asyncio.sleep(2)

        # –®–∞–Ω—Å –≤—ã–∂–∏–≤–∞–Ω–∏—è —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ç—Ä–æ–Ω–æ–≤
        survived = random.randint(1, 6) > bullets
        multiplier = bullets + 1  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ç—Ä–æ–Ω–æ–≤

        if survived:
            win_amount = bet * multiplier
            self._coins += win_amount
            self._wins += win_amount
            self._max_win = max(self._max_win, win_amount)
            result_text = (
                f"üòÖ –í—ã –≤—ã–∂–∏–ª–∏!\n"
                f"{self.strings('win').format(win_amount)}"
            )
        else:
            self._coins -= bet
            self._losses += bet
            result_text = (
                f"üíÄ –í—ã—Å—Ç—Ä–µ–ª!\n"
                f"{self.strings('lose').format(bet)}"
            )

        self._games_played += 1
        self._save_stats()

        await call.edit(
            f"{result_text}\n"
            f"{self.strings('current_balance').format(self._coins)}",
            reply_markup=[
                [{"text": "üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", "callback": self.russian_roulette}],
                [{"text": "üîô –í—ã—Ö–æ–¥", "action": "close"}],
            ],
        )
