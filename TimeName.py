"""
    ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñà‚ñÄ‚ñÄ‚ñà 
    ‚ñë‚ñà‚ñë ‚ñà‚ñë‚ñà ‚ñà‚ñÑ‚ñÑ‚ñà ‚ñà‚ñÑ‚ñÑ‚ñà ‚ñà‚ñë‚ñë‚ñà ‚ñà‚ñë‚ñë‚ñà 
    ‚ñë‚ñÄ‚ñë ‚ñÄ‚ñÄ‚ñÄ ‚ñÄ‚ñë‚ñë‚ñÄ ‚ñÄ‚ñë‚ñë‚ñÄ ‚ñÄ‚ñë‚ñë‚ñÄ ‚ñÄ‚ñÄ‚ñÄ‚ñÄ
"""

# meta developer: @hikariatama
# meta banner: https://img.example.com/banner.jpg
# meta pic: https://img.example.com/pic.jpg
# scope: inline
# scope: hikka_min 1.2.10

import asyncio
import logging
import datetime
from typing import Union
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

@loader.tds
class TimeInNickMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω–∏–∫–Ω–µ–π–º–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ —à—Ä–∏—Ñ—Ç–æ–≤"""
    
    strings = {
        "name": "TimeInNick",
        "time_enabled": "‚è∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ –≤–∫–ª—é—á–µ–Ω–æ",
        "time_disabled": "‚è∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ –≤—ã–∫–ª—é—á–µ–Ω–æ", 
        "invalid_delay": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-60 –º–∏–Ω—É—Ç)",
        "cfg_timezone": "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (MSK/UTC/EST/CST/PST/etc)",
        "cfg_update": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ (1-60 –º–∏–Ω—É—Ç)",
        "cfg_format": "–§–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {nickname}, {time}",
        "error_updating": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞: {}",
        "error_timezone": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: MSK/UTC/EST/CST/PST"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "TIMEZONE",
                "MSK",
                doc=lambda: self.strings("cfg_timezone"),
                validator=loader.validators.Choice(["MSK", "UTC", "EST", "CST", "PST"])
            ),
            loader.ConfigValue(
                "UPDATE_DELAY",
                1,
                doc=lambda: self.strings("cfg_update"),
                validator=loader.validators.Integer(minimum=1, maximum=60)
            ),
            loader.ConfigValue(
                "TIME_FORMAT",
                "{nickname} | {time}",
                doc=lambda: self.strings("cfg_format"),
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "FONT_STYLE",
                0,
                doc=lambda: (
                    "–°—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ:\n"
                    "0. 12:34 -> 12:34 (–æ–±—ã—á–Ω—ã–π)\n"
                    "1. 12:34 -> „Äé12:34„Äè\n"
                    "2. 12:34 -> ‚¶Ö12‚¶Ü:‚¶Ö34‚¶Ü\n"
                    "3. 12:34 -> ‚ûä‚ûã:‚ûå‚ûç\n"
                    "4. 12:34 -> ‚ìµ‚ì∂:‚ì∑‚ì∏\n"
                    "5. 12:34 -> ‚ë†‚ë°:‚ë¢‚ë£\n"
                    "6. 12:34 -> ùüôùüö:ùüõùüú\n"
                    "7. 12:34 -> ¬π¬≤:¬≥‚Å¥ (–≤–µ—Ä—Ö–Ω–∏–π –∏–Ω–¥–µ–∫—Å)\n"
                    "8. 12:34 -> ‚ÇÅ‚ÇÇ:‚ÇÉ‚ÇÑ (–Ω–∏–∂–Ω–∏–π –∏–Ω–¥–µ–∫—Å)"
                ),
                validator=loader.validators.Integer(minimum=0, maximum=8)
            )
        )
        self.active = False
        self.original_nick = None
        self.task = None
        self.last_time = None

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è"""
        self.active = self._db.get(self.strings["name"], "active", False)
        self.original_nick = self._db.get(self.strings["name"], "original_nick", None)
        
        if self.active and self.original_nick:
            self.task = asyncio.create_task(self._update_nickname())

    def apply_font(self, time_str: str, font_style: int) -> str:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ –∫ —Å—Ç—Ä–æ–∫–µ –≤—Ä–µ–º–µ–Ω–∏"""
        fonts = {
            0: {str(i): str(i) for i in range(10)},
            1: {str(i): f"„Äé{i}„Äè" for i in range(10)},
            2: {str(i): f"‚¶Ö{i}‚¶Ü" for i in range(10)},
            3: {"0": "‚ìø", "1": "‚ûä", "2": "‚ûã", "3": "‚ûå", "4": "‚ûç",
                "5": "‚ûé", "6": "‚ûè", "7": "‚ûê", "8": "‚ûë", "9": "‚ûí"},
            4: {"0": "‚ì™", "1": "‚ìµ", "2": "‚ì∂", "3": "‚ì∑", "4": "‚ì∏",
                "5": "‚ìπ", "6": "‚ì∫", "7": "‚ìª", "8": "‚ìº", "9": "‚ìΩ"},
            5: {"0": "‚ì™", "1": "‚ë†", "2": "‚ë°", "3": "‚ë¢", "4": "‚ë£",
                "5": "‚ë§", "6": "‚ë•", "7": "‚ë¶", "8": "‚ëß", "9": "‚ë®"},
            6: {"0": "ùüò", "1": "ùüô", "2": "ùüö", "3": "ùüõ", "4": "ùüú",
                "5": "ùüù", "6": "ùüû", "7": "ùüü", "8": "ùü†", "9": "ùü°"},
            7: {"0": "‚Å∞", "1": "¬π", "2": "¬≤", "3": "¬≥", "4": "‚Å¥",
                "5": "‚Åµ", "6": "‚Å∂", "7": "‚Å∑", "8": "‚Å∏", "9": "‚Åπ"},
            8: {"0": "‚ÇÄ", "1": "‚ÇÅ", "2": "‚ÇÇ", "3": "‚ÇÉ", "4": "‚ÇÑ",
                "5": "‚ÇÖ", "6": "‚ÇÜ", "7": "‚Çá", "8": "‚Çà", "9": "‚Çâ"}
        }

        if font_style not in fonts:
            return time_str

        font = fonts[font_style]
        font[":"] = ":"
        return "".join(font.get(char, char) for char in time_str)

    async def get_formatted_time(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Å—Ç–∏–ª—è —à—Ä–∏—Ñ—Ç–∞"""
        now = datetime.datetime.now()
        timezone_offsets = {
            "MSK": 3, "EST": -5, "CST": -6,
            "PST": -8, "UTC": 0
        }
        
        timezone = self.config["TIMEZONE"].upper()
        if timezone not in timezone_offsets:
            logger.error(f"Invalid timezone: {timezone}")
            return now.strftime("%H:%M")
            
        offset = timezone_offsets[timezone]
        adjusted_time = now + datetime.timedelta(hours=offset)
        time_str = adjusted_time.strftime("%H:%M")
        
        return self.apply_font(time_str, self.config["FONT_STYLE"])

    async def _update_nickname(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        while self.active:
            try:
                current_time = await self.get_formatted_time()
                
                if current_time == self.last_time:
                    await asyncio.sleep(30)
                    continue

                new_nick = self.config["TIME_FORMAT"].format(
                    nickname=self.original_nick,
                    time=current_time
                )

                me = await self._client.get_me()
                if me.first_name != new_nick:
                    await self._client(UpdateProfileRequest(
                        first_name=new_nick[:70]  # Telegram limit
                    ))
                    self.last_time = current_time

            except Exception as e:
                logger.exception(f"Error updating nickname: {e}")
                await asyncio.sleep(5)  # Prevent flood on error
                continue

            await asyncio.sleep(60 * self.config["UPDATE_DELAY"])

    @loader.command(
        ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ"
    )
    async def timenick(self, message: Message) -> None:
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ"""
        if self.active:
            self.active = False
            if self.task:
                self.task.cancel()
            if self.original_nick:
                try:
                    await self._client(UpdateProfileRequest(
                        first_name=self.original_nick[:70]
                    ))
                except Exception as e:
                    logger.exception(f"Error restoring nickname: {e}")
                    await utils.answer(
                        message,
                        self.strings["error_updating"].format(str(e))
                    )
                    return
            
            self._db.set(self.strings["name"], "active", False)
            self._db.set(self.strings["name"], "original_nick", None)
            
            await utils.answer(message, self.strings["time_disabled"])
            return
        
        try:
            me = await self._client.get_me()
            self.original_nick = me.first_name
            self.active = True
            
            self._db.set(self.strings["name"], "active", True)
            self._db.set(self.strings["name"], "original_nick", self.original_nick)
            
            self.task = asyncio.create_task(self._update_nickname())
            await utils.answer(message, self.strings["time_enabled"])
        except Exception as e:
            self.active = False
            logger.exception(f"Error enabling time in nickname: {e}")
            await utils.answer(
                message,
                self.strings["error_updating"].format(str(e))
            )

    async def on_unload(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        try:
            if self.active:
                self.active = False
                if self.task:
                    self.task.cancel()
                if self.original_nick:
                    await self._client(UpdateProfileRequest(
                        first_name=self.original_nick[:70]
                    ))
        except Exception as e:
            logger.exception(f"Error during unload: {e}")
