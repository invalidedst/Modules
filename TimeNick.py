#  _____                          
# |_   _|____  ____ _ _ __   ___  
#   | |/ _ \ \/ / _` | '_ \ / _ \ 
#   | | (_) >  < (_| | | | | (_) |
#   |_|\___/_/\_\__,_|_| |_|\___/ 
#                              
# meta banner: https://i.ibb.co/r2VKP6yv/image-9709.jpg
# meta developer: @Toxano_Modules
# scope: @Toxano_Modules

import asyncio
import logging
import datetime
from typing import Union, Optional
from telethon.tl.functions.account import UpdateProfileRequest
from telethon.tl.functions.users import GetFullUserRequest
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger(__name__)

TIMEZONE_OFFSETS = {
    "MSK": 3,      # –ú–æ—Å–∫–≤–∞
    "UTC": 0,      # –í—Å–µ–º–∏—Ä–Ω–æ–µ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    "GMT": 0,      # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ –ì—Ä–∏–Ω–≤–∏—á—É
    "CET": 1,      # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "EET": 2,      # –í–æ—Å—Ç–æ—á–Ω–æ–µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "AZT": 4,      # –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è 
    "AMT": 4,      # –ê—Ä–º—è–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "GET": 4,      # –ì—Ä—É–∑–∏–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "TJT": 5,      # –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "TMT": 5,      # –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "UZT": 5,      # –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "KGT": 6,      # –ö–∏—Ä–≥–∏–∑—Å–∫–æ–µ –≤—Ä–µ–º—è
    "BDT": 6,      # –ë–∞–Ω–≥–ª–∞–¥–µ—à—Å–∫–æ–µ –≤—Ä–µ–º—è
    "IST": 5.5,    # –ò–Ω–¥–∏–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "THA": 7,      # –¢–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "ICT": 7,      # –ò–Ω–¥–æ–∫–∏—Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "CST": 8,      # –ö–∏—Ç–∞–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "HKT": 8,      # –ì–æ–Ω–∫–æ–Ω–≥—Å–∫–æ–µ –≤—Ä–µ–º—è
    "JST": 9,      # –Ø–ø–æ–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "KST": 9,      # –ö–æ—Ä–µ–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "EST": -5,     # –í–æ—Å—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è (–°–®–ê)
    "EDT": -4,     # –í–æ—Å—Ç–æ—á–Ω–æ–µ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è (–°–®–ê)
    "CDT": -5,     # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è (–°–®–ê)
    "MDT": -6,     # –ì–æ—Ä–Ω–æ–µ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è (–°–®–ê)
    "PDT": -7,     # –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–µ –ª–µ—Ç–Ω–µ–µ –≤—Ä–µ–º—è (–°–®–ê)
    "PST": -8,     # –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è (–°–®–ê)
    "AKST": -9,    # –ê–ª—è—Å–∫–∏–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è
    "AEST": 10,    # –í–æ—Å—Ç–æ—á–Ω–æ–∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–µ –≤—Ä–µ–º—è
    "NZST": 12     # –ù–æ–≤–æ–∑–µ–ª–∞–Ω–¥—Å–∫–æ–µ –≤—Ä–µ–º—è
}

FONT_STYLES_DESC = """
1. 12:34 -> 12:34 (–æ–±—ã—á–Ω—ã–π)
2. 12:34 -> „Äé12:34„Äè
3. 12:34 -> ‚ûä‚ûã:‚ûå‚ûç
4. 12:34 -> ‚ìµ‚ì∂:‚ì∑‚ì∏
5. 12:34 -> ‚ë†‚ë°:‚ë¢‚ë£
6. 12:34 -> ùüôùüö:ùüõùüú 
7. 12:34 -> ¬π¬≤'¬≥‚Å¥
8. 12:34 -> ‚ÇÅ‚ÇÇ‚Äö‚ÇÉ‚ÇÑ
9. 12:34 -> 1Ô∏è‚É£2Ô∏è‚É£:3Ô∏è‚É£4Ô∏è‚É£
"""

FONT_STYLES = {
    1: lambda x: x,
    2: lambda x: f"„Äé{x}„Äè",
    3: lambda x: x.translate(str.maketrans("0123456789", "‚ìø‚ûä‚ûã‚ûå‚ûç‚ûé‚ûè‚ûê‚ûë‚ûí")),
    4: lambda x: x.translate(str.maketrans("0123456789", "‚ì™‚ìµ‚ì∂‚ì∑‚ì∏‚ìπ‚ì∫‚ìª‚ìº‚ìΩ")),
    5: lambda x: x.translate(str.maketrans("0123456789", "‚ì™‚ë†‚ë°‚ë¢‚ë£‚ë§‚ë•‚ë¶‚ëß‚ë®")),
    6: lambda x: x.translate(str.maketrans("0123456789", "ùüòùüôùüöùüõùüúùüùùüûùüüùü†ùü°")),
    7: lambda x: x.translate(str.maketrans("0123456789:", "‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ'")),
    8: lambda x: x.translate(str.maketrans("0123456789:", "‚ÇÄ‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ‚ÇÜ‚Çá‚Çà‚Çâ‚Äö")),
    9: lambda x: "".join([i + "Ô∏è‚É£" if i.isdigit() else i for i in x])
}

class FontStyleValidator(loader.validators.Validator):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è —Å—Ç–∏–ª—è —à—Ä–∏—Ñ—Ç–∞"""
    
    def __init__(self):
        super().__init__(
            self._validate,
            {"en": "font style (1-9)", "ru": "—Å—Ç–∏–ª—å —à—Ä–∏—Ñ—Ç–∞ (1-9)"}
        )
    
    @staticmethod
    def _validate(value):
        if not isinstance(value, int):
            raise loader.validators.ValidationError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        if value == 0:
            return 1
        
        if value < 1 or value > 9:
            raise loader.validators.ValidationError("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 9")
        
        return value

@loader.tds
class TimeInNickMod(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –Ω–∏–∫–Ω–µ–π–º–µ –∏ –±–∏–æ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏ —à—Ä–∏—Ñ—Ç–æ–≤"""
    
    strings = {
        "name": "TimeInNick",
        "time_enabled": "‚è∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ –≤–∫–ª—é—á–µ–Ω–æ",
        "time_disabled": "‚è∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ –≤—ã–∫–ª—é—á–µ–Ω–æ",
        "bio_enabled": "‚è∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–∏–æ –≤–∫–ª—é—á–µ–Ω–æ", 
        "bio_disabled": "‚è∞ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–∏–æ –≤—ã–∫–ª—é—á–µ–Ω–æ",
        "invalid_delay": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0-60 –º–∏–Ω—É—Ç)",
        "cfg_timezone": "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
        "cfg_update": "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (0-60 –º–∏–Ω—É—Ç, 0 = –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)",
        "cfg_nick_format": "–§–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {nickname}, {time}",
        "cfg_bio_format": "–§–æ—Ä–º–∞—Ç –±–∏–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {bio}, {time}",
        "error_updating": "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}",
        "error_timezone": "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑: {}",
        "error_max_retries": "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        "error_invalid_data": "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "TIMEZONE",
                "MSK",
                doc=lambda: self.strings("cfg_timezone"),
                validator=loader.validators.Choice(list(TIMEZONE_OFFSETS.keys()))
            ),
            loader.ConfigValue(
                "UPDATE_DELAY",
                0,
                doc=lambda: self.strings("cfg_update"),
                validator=loader.validators.Integer(minimum=0, maximum=60)
            ),
            loader.ConfigValue(
                "NICK_FORMAT",
                "{nickname} | {time}",
                doc=lambda: self.strings("cfg_nick_format"),
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "BIO_FORMAT",
                "{bio} | {time}",
                doc=lambda: self.strings("cfg_bio_format"),
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "FONT_STYLE",
                1,
                doc=FONT_STYLES_DESC,
                validator=FontStyleValidator()
            )
        )
        self.nick_active = False
        self.bio_active = False
        self.original_nick = None
        self.original_bio = None
        self.nick_task = None
        self.bio_task = None
        self.last_nick_time = None
        self.last_bio_time = None
        self.max_retries = 10
        self.current_nick_retries = 0
        self.current_bio_retries = 0

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è"""
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            self.nick_active = self._db.get(self.strings["name"], "nick_active", False)
            self.bio_active = self._db.get(self.strings["name"], "bio_active", False)
            self.original_nick = self._db.get(self.strings["name"], "original_nick", None)
            self.original_bio = self._db.get(self.strings["name"], "original_bio", None)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
            if self.nick_active:
                if not self.original_nick or not isinstance(self.original_nick, str):
                    logger.warning("Invalid nickname data, resetting")
                    await self._reset_nick_state()
                else:
                    self.nick_task = asyncio.create_task(self._update_nickname())
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∏–æ
            if self.bio_active:
                try:
                    full_user = await self._client(GetFullUserRequest("me"))
                    current_bio = full_user.full_user.about or ""
                    
                    if not self.original_bio:
                        self.original_bio = current_bio
                        self._db.set(self.strings["name"], "original_bio", current_bio)
                    
                    self.bio_task = asyncio.create_task(self._update_bio())
                except Exception as e:
                    logger.exception("Failed to restore bio on startup")
                    await self._reset_bio_state()
        except Exception as e:
            logger.exception("Error during client_ready")
            await self._reset_all_states()

    async def _reset_nick_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞"""
        self.nick_active = False
        self.original_nick = None
        if self.nick_task:
            self.nick_task.cancel()
        self._db.set(self.strings["name"], "nick_active", False)
        self._db.set(self.strings["name"], "original_nick", None)

    async def _reset_bio_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∏–æ"""
        self.bio_active = False
        self.original_bio = None
        if self.bio_task:
            self.bio_task.cancel()
        self._db.set(self.strings["name"], "bio_active", False)
        self._db.set(self.strings["name"], "original_bio", None)

    async def _reset_all_states(self):
        """–°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        await self._reset_nick_state()
        await self._reset_bio_state()

    async def get_formatted_time(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –∏ —Å—Ç–∏–ª—è —à—Ä–∏—Ñ—Ç–∞"""
        try:
            now = datetime.datetime.now(datetime.timezone.utc)
            
            timezone = self.config["TIMEZONE"].upper()
            if timezone not in TIMEZONE_OFFSETS:
                logger.error(f"Invalid timezone: {timezone}")
                timezone = "UTC"
                
            offset = TIMEZONE_OFFSETS[timezone]
            hour_offset = int(offset)
            minute_offset = int((offset - hour_offset) * 60)
            
            adjusted_time = now + datetime.timedelta(hours=hour_offset, minutes=minute_offset)
            time_str = adjusted_time.strftime("%H:%M")
            
            font_style = self.config["FONT_STYLE"]
            if font_style == 0 or font_style not in FONT_STYLES:
                font_style = 1
            
            return FONT_STYLES[font_style](time_str)
        except Exception as e:
            logger.exception("Error formatting time")
            return datetime.datetime.now().strftime("%H:%M")

    async def _update_nickname(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        update_delay = self.config["UPDATE_DELAY"] * 60 if self.config["UPDATE_DELAY"] > 0 else 1
        self.current_nick_retries = 0
        
        while self.nick_active and self.current_nick_retries < self.max_retries:
            try:
                current_time = await self.get_formatted_time()
                
                if current_time != self.last_nick_time:
                    new_nick = self.config["NICK_FORMAT"].format(
                        nickname=self.original_nick or "",
                        time=current_time
                    )

                    await self._client(UpdateProfileRequest(
                        first_name=new_nick[:70]
                    ))
                    self.last_nick_time = current_time
                    self.current_nick_retries = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

            except Exception as e:
                self.current_nick_retries += 1
                logger.exception(f"Error updating nickname (attempt {self.current_nick_retries}): {e}")
                
                if self.current_nick_retries >= self.max_retries:
                    logger.error("Max retries exceeded for nickname updates")
                    await self._reset_nick_state()
                    break
                
                await asyncio.sleep(min(5 * self.current_nick_retries, 30))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue

            await asyncio.sleep(update_delay)

    async def _update_bio(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∏–æ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        update_delay = self.config["UPDATE_DELAY"] * 60 if self.config["UPDATE_DELAY"] > 0 else 1
        self.current_bio_retries = 0
        
        while self.bio_active and self.current_bio_retries < self.max_retries:
            try:
                current_time = await self.get_formatted_time()
                
                if current_time != self.last_bio_time:
                    new_bio = self.config["BIO_FORMAT"].format(
                        bio=self.original_bio or "",
                        time=current_time
                    )

                    await self._client(UpdateProfileRequest(
                        about=new_bio[:70]
                    ))
                    self.last_bio_time = current_time
                    self.current_bio_retries = 0  # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

            except Exception as e:
                self.current_bio_retries += 1
                logger.exception(f"Error updating bio (attempt {self.current_bio_retries}): {e}")
                
                if self.current_bio_retries >= self.max_retries:
                    logger.error("Max retries exceeded for bio updates")
                    await self._reset_bio_state()
                    break
                
                await asyncio.sleep(min(5 * self.current_bio_retries, 30))  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                continue

            await asyncio.sleep(update_delay)

    async def _safely_restore_profile(self, restore_nick: bool = False, restore_bio: bool = False) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å"""
        try:
            if restore_nick and self.original_nick:
                await self._client(UpdateProfileRequest(
                    first_name=self.original_nick[:70]
                ))
            
            if restore_bio and self.original_bio is not None:
                await self._client(UpdateProfileRequest(
                    about=self.original_bio[:70]
                ))
            
            return True
        except Exception as e:
            logger.exception(f"Error restoring profile: {e}")
            return False

    @loader.command(
        ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ"
    )
    async def timenick(self, message: Message) -> None:
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–Ω–µ–π–º–µ"""
        if self.nick_active:
            self.nick_active = False
            if self.nick_task:
                self.nick_task.cancel()
                self.nick_task = None
            
            success = await self._safely_restore_profile(restore_nick=True)
            if not success:
                await utils.answer(
                    message,
                    self.strings["error_updating"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º")
                )
                return
            
            await self._reset_nick_state()
            await utils.answer(message, self.strings["time_disabled"])
            return
        
        try:
            me = await self._client.get_me()
            current_nick = me.first_name or ""
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
            if "|" in current_nick:
                self.original_nick = current_nick.split("|")[0].strip()
            else:
                self.original_nick = current_nick
            
            if not self.original_nick:
                self.original_nick = "User"
            
            self.nick_active = True
            self.current_nick_retries = 0
            
            self._db.set(self.strings["name"], "nick_active", True)
            self._db.set(self.strings["name"], "original_nick", self.original_nick)
            
            self.nick_task = asyncio.create_task(self._update_nickname())
            await utils.answer(message, self.strings["time_enabled"])
        except Exception as e:
            await self._reset_nick_state()
            logger.exception(f"Error enabling time in nickname: {e}")
            await utils.answer(
                message,
                self.strings["error_updating"].format(str(e))
            )

    @loader.command(
        ru_doc="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–∏–æ"
    )
    async def timebio(self, message: Message) -> None:
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–∏–æ"""
        if self.bio_active:
            self.bio_active = False
            if self.bio_task:
                self.bio_task.cancel()
                self.bio_task = None

            success = await self._safely_restore_profile(restore_bio=True)
            if not success:
                await utils.answer(
                    message,
                    self.strings["error_updating"].format("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–æ")
                )
                return

            await self._reset_bio_state()
            await utils.answer(message, self.strings["bio_disabled"])
            return

        try:
            full_user = await self._client(GetFullUserRequest("me"))
            current_bio = full_user.full_user.about or ""
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±–∏–æ
            if "|" in current_bio:
                self.original_bio = current_bio.split("|")[0].strip()
            else:
                self.original_bio = current_bio
            
            self.bio_active = True
            self.current_bio_retries = 0

            self._db.set(self.strings["name"], "bio_active", True)
            self._db.set(self.strings["name"], "original_bio", self.original_bio)

            self.bio_task = asyncio.create_task(self._update_bio())
            await utils.answer(message, self.strings["bio_enabled"])
        except Exception as e:
            await self._reset_bio_state()
            logger.exception(f"Error enabling time in bio: {e}")
            await utils.answer(
                message,
                self.strings["error_updating"].format(str(e))
            )

    async def on_unload(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á
            if self.nick_task:
                self.nick_task.cancel()
            if self.bio_task:
                self.bio_task.cancel()
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            if self.nick_active or self.bio_active:
                await self._safely_restore_profile(
                    restore_nick=self.nick_active,
                    restore_bio=self.bio_active
                )

        except Exception as e:
            logger.exception(f"Error during unload: {e}")
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            await self._reset_all_states()