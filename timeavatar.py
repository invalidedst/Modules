#  _____                          
# |_   _|____  ____ _ _ __   ___  
#   | |/ _ \ \/ / _` | '_ \ / _ \ 
#   | | (_) >  < (_| | | | | (_) |
#   |_|\___/_/\_\__,_|_| |_|\___/ 
#                              
# meta banner: https://i.ibb.co/BV2s93rS/image-10098.jpg
# meta developer: @mqvon
# scope: @mqvon

import asyncio
import logging
import io
import aiohttp
import base64
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont
from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
from telethon import utils
from .. import loader, utils as hikka_utils

logger = logging.getLogger(__name__)


@loader.tds
class TimeAvatarMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ"""
    
    strings = {
        "name": "TimeAvatar",
        "avatar_enabled": "üñº <b>–í—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ –≤–∫–ª—é—á–µ–Ω–æ!</b>\n"
                         "–í–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º",
        "avatar_disabled": "‚èπ <b>–í—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>",
        "photo_set": "üñº <b>–§–æ—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!</b>\n"
                    "–¢–µ–ø–µ—Ä—å –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        "photo_error": "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ñ–æ—Ç–æ</b>\n"
                      "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "download_error": "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>",
        "already_running": "‚ö†Ô∏è <b>–í—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ</b>",
        "not_running": "‚ö†Ô∏è <b>–í—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ</b>",
        "no_photo": "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–æ—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π .setavatarphoto</b>",
        "help_timeavatar": "–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ",
        "help_setavatarphoto": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –≤—Ä–µ–º—è",
        "help_stopavatar": "–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ"
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "timezone_offset",
                3,
                "–°–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –æ—Ç UTC (–¥–ª—è –ú–æ—Å–∫–≤—ã: 3)",
                validator=loader.validators.Integer(minimum=-12, maximum=14)
            ),
            loader.ConfigValue(
                "update_interval",
                60,
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö",
                validator=loader.validators.Integer(minimum=30, maximum=3600)
            )
        )
        self._task = None
        self._background_photo = None
        
    async def client_ready(self, client, db):
        self._client = client
        self._db = db

        photo_b64 = self._db.get("TimeAvatar", "background_photo", None)
        if photo_b64:
            try:
                self._background_photo = base64.b64decode(photo_b64)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –±–∞–∑—ã: {e}")
                self._background_photo = None

    @loader.command()
    async def timeavatar(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ"""
        if self._task and not self._task.done():
            await hikka_utils.answer(message, self.strings["already_running"])
            return
            
        if not self._background_photo:
            await hikka_utils.answer(message, self.strings["no_photo"])
            return
        
        self._task = asyncio.create_task(self._update_time_loop())
        
        await hikka_utils.answer(message, self.strings["avatar_enabled"])
    
    @loader.command()
    async def setavatarphoto(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ"""
        args = hikka_utils.get_args_raw(message)
        
        if not args:

            if message.reply_to_msg_id:
                reply = await message.get_reply_message()
                if reply and reply.photo:
                    photo_data = await reply.download_media(bytes)
                    await self._process_background_photo(message, photo_data)
                    return
            
            await hikka_utils.answer(message, "‚ùå <b>–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ</b>")
            return
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(args) as response:
                    if response.status == 200:
                        photo_data = await response.read()
                        await self._process_background_photo(message, photo_data)
                    else:
                        await hikka_utils.answer(message, self.strings["download_error"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await hikka_utils.answer(message, self.strings["download_error"])
    
    async def _process_background_photo(self, message, photo_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            with Image.open(io.BytesIO(photo_data)) as img:
 
                self._background_photo = photo_data

                photo_b64 = base64.b64encode(photo_data).decode('utf-8')
                self._db.set("TimeAvatar", "background_photo", photo_b64)
                
                await hikka_utils.answer(message, self.strings["photo_set"])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await hikka_utils.answer(message, self.strings["photo_error"])
    
    @loader.command()
    async def stopavatar(self, message):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º—è –≤ –∞–≤–∞—Ç–∞—Ä–∫–µ"""
        if not self._task or self._task.done():
            await hikka_utils.answer(message, self.strings["not_running"])
            return
        

        self._task.cancel()
        
        try:
            photos = await self._client.get_profile_photos("me", limit=1)
            if photos and self._background_photo:
                await self._client(DeletePhotosRequest(photos))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        
        await hikka_utils.answer(message, self.strings["avatar_disabled"])
    
    async def _update_time_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        while True:
            try:
                await self._update_nick_with_time()
                await asyncio.sleep(self.config["update_interval"])
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω–∏–∫–µ: {e}")
                await asyncio.sleep(60)  
    
    async def _update_nick_with_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:

            now = datetime.utcnow() + timedelta(hours=self.config["timezone_offset"])
            time_str = now.strftime("%H:%M")
            

            if self._background_photo:
                await self._update_profile_photo_with_time(time_str)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")
    
    async def _update_profile_photo_with_time(self, time_str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —Å –≤—Ä–µ–º–µ–Ω–µ–º"""
        try:

            try:
                photos = await self._client.get_profile_photos("me", limit=1)
                if photos:
                    await self._client(DeletePhotosRequest(photos))
            except Exception as e:
                logger.debug(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
            

            with Image.open(io.BytesIO(self._background_photo)) as img:
               
                img = img.resize((640, 640), Image.Resampling.LANCZOS)
                
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                overlay = Image.new('RGBA', (640, 640), (0, 0, 0, 120))  
                img_rgba = img.convert('RGBA')
                img = Image.alpha_composite(img_rgba, overlay).convert('RGB')
                
                draw = ImageDraw.Draw(img)
                
                now = datetime.utcnow() + timedelta(hours=self.config["timezone_offset"])
                date_str = now.strftime('%d.%m.%Y')
                weekday_str = now.strftime('%A')
                
                weekdays = {
                    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
                    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
                }
                weekday_ru = weekdays.get(weekday_str, weekday_str)
                
                try:
                    time_font = ImageFont.truetype("/system/fonts/Arial.ttf", 90)
                    date_font = ImageFont.truetype("/system/fonts/Arial.ttf", 45)
                    day_font = ImageFont.truetype("/system/fonts/Arial.ttf", 38)
                except:
                    try:
                        time_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 90)
                        date_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 45)
                        day_font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 38)
                    except:
                        time_font = ImageFont.load_default()
                        date_font = ImageFont.load_default()
                        day_font = ImageFont.load_default()
                
                time_bbox = draw.textbbox((0, 0), time_str, font=time_font)
                time_width = time_bbox[2] - time_bbox[0]
                time_height = time_bbox[3] - time_bbox[1]
                
                date_bbox = draw.textbbox((0, 0), date_str, font=date_font)
                date_width = date_bbox[2] - date_bbox[0]
                date_height = date_bbox[3] - date_bbox[1]
                
                day_bbox = draw.textbbox((0, 0), weekday_ru, font=day_font)
                day_width = day_bbox[2] - day_bbox[0]
                day_height = day_bbox[3] - day_bbox[1]
                
                center_x = 320
                
                time_x = center_x - time_width // 2
                time_y = 280
                
                date_x = center_x - date_width // 2
                date_y = time_y + time_height + 20
                
                day_x = center_x - day_width // 2
                day_y = date_y + date_height + 15
                
                def draw_text_with_shadow(x, y, text, font, shadow_offset=2):
                    for dx in range(-shadow_offset, shadow_offset + 1):
                        for dy in range(-shadow_offset, shadow_offset + 1):
                            if dx != 0 or dy != 0:
                                draw.text((x + dx, y + dy), text, font=font, fill='black')

                    draw.text((x, y), text, font=font, fill='white')
                

                draw_text_with_shadow(time_x, time_y, time_str, time_font, 3)
                
                draw_text_with_shadow(date_x, date_y, date_str, date_font, 2)
                
                draw_text_with_shadow(day_x, day_y, weekday_ru, day_font, 2)
                
                output = io.BytesIO()
                img.save(output, format='JPEG', quality=95)
                photo_bytes = output.getvalue()
                
                await self._client(UploadProfilePhotoRequest(
                    file=await self._client.upload_file(photo_bytes, file_name="time_photo.jpg")
                ))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
    
    async def on_unload(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è"""
        if self._task and not self._task.done():
            self._task.cancel()
            
            try:
                photos = await self._client.get_profile_photos("me", limit=1)
                if photos and self._background_photo:
                    await self._client(DeletePhotosRequest(photos))
            except:
                pass