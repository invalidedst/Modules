import asyncio
import aiohttp
import logging
import time
from typing import Optional, Dict, List, Any
from herokutl.types import Message
from .. import loader, utils

@loader.tds
class VoiceToxanoMod(loader.Module):
    """–ú—É–∑—ã–∫–∞, –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ —Å –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ –∏ –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""

    strings = {
        "name": "VoiceToxano",
        "processing": "üîÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</b>",
        "success": "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>",
        "error_generic": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "error_network": "üåê <b>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "error_api": "üîå <b>–û—à–∏–±–∫–∞ API:</b> <code>{error}</code>",
        "error_timeout": "‚è±Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>",
        "error_not_found": "üîç <b>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
        "invalid_args": "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "config_desc_repeat": "–í–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞",
        "config_desc_volume": "–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (0-200)",
        "config_desc_timeout": "–¢–∞–π–º–∞—É—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Å–µ–∫)",
        "config_desc_max_playlist": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    }

    strings_ru = {
        "processing": "üîÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...</b>",
        "success": "‚úÖ <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>",
        "error_generic": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "error_network": "üåê <b>–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞:</b> <code>{error}</code>",
        "error_api": "üîå <b>–û—à–∏–±–∫–∞ API:</b> <code>{error}</code>",
        "error_timeout": "‚è±Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è</b>",
        "error_not_found": "üîç <b>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>",
        "invalid_args": "‚ö†Ô∏è <b>–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã</b>",
        "config_desc_repeat": "–í–∫–ª—é—á–∏—Ç—å –ø–æ–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞",
        "config_desc_volume": "–ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (0-200)",
        "config_desc_timeout": "–¢–∞–π–º–∞—É—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (—Å–µ–∫)",
        "config_desc_max_playlist": "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "repeat",
                False,
                lambda: self.strings("config_desc_repeat"),
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "volume",
                100,
                lambda: self.strings("config_desc_volume"),
                validator=loader.validators.Integer(minimum=0, maximum=200)
            ),
            loader.ConfigValue(
                "timeout",
                30,
                lambda: self.strings("config_desc_timeout"),
                validator=loader.validators.Integer(minimum=5, maximum=120)
            ),
            loader.ConfigValue(
                "max_playlist",
                50,
                lambda: self.strings("config_desc_max_playlist"),
                validator=loader.validators.Integer(minimum=1, maximum=200)
            )
        )
        self._session: Optional[aiohttp.ClientSession] = None
        self._cache: Dict[str, Any] = {}
        self._cache_timestamps: Dict[str, float] = {}
        self._task_lock = asyncio.Lock()
        self._playlist: List[Dict[str, Any]] = []
        self._current_track: Optional[Dict[str, Any]] = None
        self._is_playing = False
        self._panel_message_id: Optional[int] = None
        self._stats = {
            "tracks_played": 0,
            "errors": 0,
            "cache_hits": 0,
            "start_time": time.time()
        }

    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self._session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=self.config["timeout"]),
            headers={"User-Agent": f"{self.strings['name']}/1.0"}
        )
        self._cleanup_task = asyncio.create_task(self._cache_cleanup_loop())
        saved_data = self._db.get(self.strings["name"], "module_data", {})
        if self._validate_saved_data(saved_data):
            self._restore_state(saved_data)

    async def on_unload(self):
        self._save_state()
        if self._session:
            await self._session.close()
        if hasattr(self, '_cleanup_task'):
            self._cleanup_task.cancel()
        for task in asyncio.all_tasks():
            if task.get_name().startswith(f"{self.strings['name']}_"):
                task.cancel()