#  _____
# |_   _|____  ____ _ _ __   ___
#   | |/ _ \ \/ / _` | '_ \ / _ \
#   | | (_) >  < (_| | | | | (_) |
#   |_|\___/_/\_\__,_|_| |_|\___/
#
# meta developer: @Toxano_Modules
# scope: @Toxano_Modules

from telethon.tl.custom import Button
from telethon.types import Message
from .. import loader, utils
import asyncio
import google.generativeai as genai
from typing import List, Optional
import os
import re

CHUNK_SEP = "\n"
MAX_PAGE = 3900
CB_PREFIX = "histai_"
HARD_LIMIT = 180          
MAX_LINE_LEN = 120         

@loader.tds
class HistAI(loader.Module):
    """–∫–∏–¥–∞–µ—Ç —á—Ç–æ –±—ã–ª–æ –ø–æ–∫–∞ —Ç—ã –æ—Ç—Ö–æ–¥–∏–ª"""

    strings = {
        "name": "HistAI",
        "cfg_key": "–ö–ª—é—á Gemini",
        "cfg_limit": "–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±—Ä–∞—Ç—å",
        "cfg_mode": "–†–µ–∂–∏–º: norm / agro / neko",
        "no_key": "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ö–ª—é—á Gemini –Ω–µ –∑–∞–¥–∞–Ω</b>",
        "processing": "<emoji document_id=5326015457155770266>‚è≥</emoji> <b>–©–∞ —á–µ–∫–Ω—É‚Ä¶</b>",
        "done_all": "<emoji document_id=5328311576736833844>ü§ñ</emoji> <b>AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π.\n–í–æ—Ç —á—Ç–æ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏:</b>",
        "done_user": "<emoji document_id=5328311576736833844>ü§ñ</emoji> <b>AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {nick}.\n–í–æ—Ç —á—Ç–æ –≤—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏:</b>",
        "no_target": "<b>–ö–æ–≥–æ —á–µ–∫–∞—Ç—å? –£–∫–∞–∂–∏ @username –∏–ª–∏ —Ä–µ–ø–ª–∞–π.</b>",
        "page": "üìÑ {cur}/{total}",
        "blocked": "<emoji document_id=5312526098750252863>üö´</emoji> <b>Gemini –æ—Ç–∫–∞–∑–∞–ª—Å—è –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–∞—Ç–∞/–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π). –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –±–µ–∑ –ò–ò:</b>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("gemini_key", "", self.strings["cfg_key"], validator=loader.validators.Hidden()),
            loader.ConfigValue("history_limit", 150, self.strings["cfg_limit"], validator=loader.validators.Integer(minimum=1, maximum=HARD_LIMIT)),
            loader.ConfigValue("mode", "norm", self.strings["cfg_mode"], validator=loader.validators.Choice(["norm", "agro", "neko"])),
        )
        self._db = {}

    async def client_ready(self, client, db):
        self.client = client

    async def _ask(self, prompt: str, text: str) -> str:
        key = self.config["gemini_key"].strip() or os.getenv("GOOGLE_API_KEY")
        if not key:
            return "‚ùå –ù–∏ API-key –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –Ω–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω—ã."
        try:
            genai.configure(api_key=key)
            response = await asyncio.to_thread(
                genai.GenerativeModel("gemini-1.5-flash").generate_content,
                prompt + "\n\n" + text,
                safety_settings={
                    "HARASSMENT": "BLOCK_NONE",
                    "HATE_SPEECH": "BLOCK_NONE",
                    "SEXUAL": "BLOCK_NONE",
                    "DANGEROUS": "BLOCK_NONE",
                }
            )
            if not response.candidates:
                return "BLOCKED"
            return response.text.strip()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ Gemini: {e}"

    def _clean(self, txt: str) -> str:
        if not txt:
            return ""
        txt = re.sub(r"http\S+", "<—Å—Å—ã–ª–∫–∞>", txt)           # —É–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏
        txt = re.sub(r"[–∞-—è—ë]*[—Öx]+[—Éy]+[–πi—é—è–µ—ë]\w*", "[–º–∞—Ç]", txt, flags=re.I)
        return txt[:MAX_LINE_LEN]

    def _media(self, m: Message) -> str:
        for t in ("sticker", "gif", "photo", "video", "voice", "audio", "document"):
            if getattr(m, t, None):
                return f"[{t}]"
        return ""

    def _prep_all(self, msgs: List[Message]) -> str:
        lines = []
        for m in reversed(msgs[-HARD_LIMIT:]):
            if not m.sender:
                continue
            if (getattr(m.sender, "username") or "").endswith("_bot"):
                continue
            nick = f"{m.sender.first_name or '–ë–µ–∑_–∏–º–µ–Ω–∏'} ({m.sender.id})"
            time = m.date.strftime("%H:%M")
            body = self._clean(m.raw_text) or self._media(m)
            if m.is_reply:
                body = "‚Üí " + body
            lines.append(f"[{time}] {nick} > {body}")
        return "\n".join(lines)

    def _prep_user(self, msgs: List[Message], uid: int) -> str:
        lines = []
        for m in reversed(msgs[-HARD_LIMIT:]):
            if m.sender_id != uid:
                continue
            time = m.date.strftime("%H:%M")
            body = self._clean(m.raw_text) or self._media(m)
            if m.is_reply:
                body = "‚Üí " + body
            lines.append(f"[{time}] {body}")
        return "\n".join(lines)

    def _paginate(self, text: str) -> List[str]:
        pages, buf = [""], ""
        for ln in text.splitlines():
            if len(buf + ln) + 1 > MAX_PAGE:
                pages.append(ln)
                buf = ln
            else:
                buf += (("\n" + ln) if buf else ln)
                pages[-1] = buf
        return pages or [""]

    async def _send_page(self, cid: int, pages: List[str], idx: int, hdr: str, rpl: int):
        kb = []
        if len(pages) > 1:
            row = []
            if idx:
                row.append(Button.inline("‚¨ÖÔ∏è", f"{CB_PREFIX}{idx-1}"))
            row.append(Button.inline(self.strings["page"].format(cur=idx+1, total=len(pages)), "noop"))
            if idx < len(pages) - 1:
                row.append(Button.inline("‚û°Ô∏è", f"{CB_PREFIX}{idx+1}"))
            kb = [row]
        await self.client.send_message(
            entity=cid,
            message=f"{hdr}\n\n<blockquote expandable>{pages[idx]}</blockquote>",
            buttons=kb or None,
            reply_to=rpl
        )

    @loader.command(
        ru_doc="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ –ø–æ–∫–∞ —Ç—ã –æ—Ç–æ—à—ë–ª. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å @username –∏–ª–∏ —Ä–µ–ø–ª–∞–π.",
        en_doc="Show what happened while you were away. Use @username or reply to filter.",
    )
    async def ch(self, message: Message):
        if not self.config["gemini_key"] and not os.getenv("GOOGLE_API_KEY"):
            await utils.answer(message, self.strings["no_key"])
            return

        cid = utils.get_chat_id(message)
        limit = min(self.config["history_limit"], HARD_LIMIT)

        msgs = [m async for m in self.client.iter_messages(cid, limit=limit + 50)]
        msgs = [m for m in msgs if not (getattr(m.sender, "username") or "").endswith("_bot")][:limit]

        if not msgs:
            await utils.answer(message, "<b>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.</b>")
            return

        await message.delete()

        user_id, user_name = None, ""
        if reply := await message.get_reply_message():
            user_id, user_name = reply.sender_id, (reply.sender.first_name or str(reply.sender.id))
        else:
            arg = utils.get_args_raw(message).strip()
            if arg.startswith("@"):
                try:
                    ent = await self.client.get_entity(arg[1:])
                    user_id, user_name = ent.id, (ent.first_name or str(ent.id))
                except Exception:
                    user_id = None
            elif arg.isdigit():
                try:
                    ent = await self.client.get_entity(int(arg))
                    user_id, user_name = ent.id, (ent.first_name or str(ent.id))
                except Exception:
                    user_id = None

        owner = (await self.client.get_me()).first_name or "–•–æ–∑—è–∏–Ω"

        if user_id is None:
            raw_text = self._prep_all(msgs)
            header = self.strings["done_all"].format(limit=len(msgs))
            prompt = (
                f"–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram-—á–∞—Ç–∞ —Å—Ç—Ä–æ–≥–æ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ.\n"
                f"–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:\n[–≤—Ä–µ–º—è] –∏–º—è (id) > —Ç–µ–∫—Å—Ç –∏–ª–∏ [—Ç–∏–ø –º–µ–¥–∏–∞]\n\n"
                f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª–∏ –ª—é–¥–∏.\n"
                f"- –ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã.\n"
                f"- –ù–µ –æ–±—ä–µ–¥–∏–Ω—è–π —Ä–∞–∑–Ω—ã—Ö –ª—é–¥–µ–π –≤ –æ–¥–Ω–æ –ª–∏—Ü–æ.\n"
                f"- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: - [–≤—Ä–µ–º—è] –∏–º—è: –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ [—Ç–∏–ø –º–µ–¥–∏–∞]\n"
                f"{'–ë—É–¥—å —Å–ª–µ–≥–∫–∞ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º, –Ω–æ –Ω–µ —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–π.' if self.config['mode'] == 'agro' else '–ë–µ–∑ –º–∞—Ç–∞ –∏ –±–µ–∑ —Ñ–∞–Ω—Ç–∞–∑–∏–π.'}"
            )
        else:
            raw_text = self._prep_user(msgs, user_id)
            header = self.strings["done_user"].format(limit=len(raw_text.splitlines()), nick=user_name)
            prompt = (
                f"–ù–∏–∂–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} (id{user_id}) –∏–∑ Telegram-—á–∞—Ç–∞.\n"
                f"–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç:\n[–≤—Ä–µ–º—è] —Ç–µ–∫—Å—Ç –∏–ª–∏ [—Ñ–æ—Ç–æ/—Ñ–∞–π–ª/‚Ä¶]\n\n"
                f"–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª/–æ—Ç–ø—Ä–∞–≤–∏–ª.\n"
                f"–ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è.\n"
                f"–§–æ—Ä–º–∞—Ç: - [–≤—Ä–µ–º—è] –∫—Ä–∞—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –∏–ª–∏ [—Ç–∏–ø –º–µ–¥–∏–∞]\n"
                f"{'–ë—É–¥—å —Å–ª–µ–≥–∫–∞ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º, –Ω–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π.' if self.config['mode'] == 'agro' else '–ë–µ–∑ –º–∞—Ç–∞ –∏ –±–µ–∑ —Ñ–∞–Ω—Ç–∞–∑–∏–π.'}"
            )

        ai_text = await self._ask(prompt, raw_text)
        if ai_text == "BLOCKED":

            pages = self._paginate(raw_text)
            header = self.strings["blocked"]
        elif ai_text.startswith("–û—à–∏–±–∫–∞"):
            pages = [ai_text]
        else:
            pages = self._paginate(ai_text)

        self._db[f"hist:{cid}"] = pages if pages != [""] else None
        await self._send_page(cid, pages, 0, header, message.reply_to_msg_id or message.id)

    @loader.callback_handler()
    async def _flip_page(self, call):
        if not call.data.startswith(CB_PREFIX):
            return
        try:
            idx = int(call.data[len(CB_PREFIX):])
        except ValueError:
            await call.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å")
            return

        cid = call.message.chat_id
        pages = self._db.get(f"hist:{cid}")
        if not isinstance(pages, list) or not pages:
            await call.answer("–°–≤–æ–¥–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.")
            await call.message.delete()
            self._db.pop(f"hist:{cid}", None)
            return
        if idx < 0 or idx >= len(pages):
            await call.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        header = call.message.text.split("\n\n<blockquote expandable>")[0]
        await self._send_page(cid, pages, idx, header,
                              call.message.reply_to_msg_id or call.message.id)
        await call.message.delete()
