#  _____                          
# |_   _|____  ____ _ _ __   ___  
#   | |/ _ \ \/ / _` | '_ \ / _ \ 
#   | | (_) >  < (_| | | | | (_) |
#   |_|\___/_/\_\__,_|_| |_|\___/ 
#                             
# meta developer: @Toxano_Modules
# scope: @Toxano_Modules

from herokutl.types import Message
from .. import loader, utils
import asyncio
import google.generativeai as genai
from typing import List


@loader.tds
class HistAI(loader.Module):
    """–∫–∏–¥–∞–µ—Ç —á—Ç–æ –±—ã–ª–æ –ø–æ–∫–∞ —Ç—ã –æ—Ç—Ö–æ–¥–∏–ª –ø–æ –¥—Ä–æ—á–∏—Ç—å  
    üìÑ –ì–∞–π–¥: [NE TUTOR](https://telegra.ph/NE-TUTOR-07-17)"""
    strings = {
        "name": "HistAI",
        "cfg_key": "–ö–ª—é—á Gemini",
        "cfg_limit": "–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –±—Ä–∞—Ç—å",
        "cfg_mode": "–†–µ–∂–∏–º: agro / norm",
        "no_key": "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ö–ª—é—á Gemini –Ω–µ –∑–∞–¥–∞–Ω</b>",
        "processing": "<emoji document_id=5326015457155770266>‚è≥</emoji> <b>–©–∞ —á–µ–∫–Ω—É‚Ä¶</b>",
        "done": "<emoji document_id=5328311576736833844>ü§ñ</emoji> <b>AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –ø–æ—Å–ª–µ–¥–Ω–∏–µ {cnt} —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n\n<blockquote expandable>{txt}</blockquote>",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("gemini_key", "", self.strings["cfg_key"], validator=loader.validators.Hidden()),
            loader.ConfigValue("history_limit", 250, self.strings["cfg_limit"], validator=loader.validators.Integer()),
            loader.ConfigValue("mode", "norm", self.strings["cfg_mode"], validator=loader.validators.Choice(["norm", "agro"])),
        )

    async def client_ready(self, client, db):
        if self.config["gemini_key"]:
            genai.configure(api_key=self.config["gemini_key"])

    async def _ask(self, prompt: str, text: str) -> str:
        try:
            return (await asyncio.to_thread(
                genai.GenerativeModel("gemini-2.0-flash").generate_content,
                prompt + "\n\n" + text
            )).text.strip()
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ Gemini: {e}"

    async def _prep(self, msgs: List[Message]) -> str:
        lines = []
        for msg in reversed(msgs):
            txt = (msg.raw_text or "").strip()
            if not txt:
                continue
            sender = msg.sender
            if not sender:
                nick = "Unknown"
            else:
                username = getattr(sender, "username", None) or ""
                if username.endswith("_bot"):
                    continue
                nick = username if username else str(sender.first_name or sender.id or "Unknown")
            ts = msg.date.strftime("%H:%M")
            lines.append(f"[{ts}] {nick}: {txt}")
        return "\n".join(lines)

    @loader.command()
    async def ch(self, message: Message):
        """–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞"""
        if not self.config["gemini_key"]:
            await utils.answer(message, self.strings["no_key"])
            return

        await message.delete()  # —É–±–∏—Ä–∞–µ–º "–©–∞ —á–µ–∫–Ω—É‚Ä¶"
        chat_id = utils.get_chat_id(message)
        msgs = [m async for m in self.client.iter_messages(chat_id, limit=self.config["history_limit"])]
        if not msgs:
            await message.respond("<b>–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.</b>")
            return

        text = await self._prep(msgs)
        mode = self.config["mode"]

        prompt = (
            "–°–æ—Å—Ç–∞–≤—å –ø–æ–¥—Ä–æ–±–Ω—ã–π –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ (1.-10.) –∏–∑ 10 –ø—É–Ω–∫—Ç–æ–≤, "
            "–æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö, —á—Ç–æ –¥–µ–ª–∞–ª–∏/–æ–±—Å—É–∂–¥–∞–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏. "
            "–î–æ–±–∞–≤—å –Ω–µ–±–æ–ª—å—à–∏–µ –¥–µ—Ç–∞–ª–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π. "
            "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∏–∫–∏ –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º—ã –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @. "
            f"{'–ú–æ–∂–Ω–æ –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è.' if mode == 'agro' else '–ë–µ–∑ –º–∞—Ç–∞.'} "
            "–ù–µ –¥–æ–±–∞–≤–ª—è–π –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑."
        )
        res = await self._ask(prompt, text)

        try:
            await message.respond(self.strings["done"].format(cnt=len(msgs), txt=res))
        except Exception as e:
            if "TOPIC_CLOSED" in str(e):
                await message.respond(
                    "<emoji document_id=5312526098750252863>üö´</emoji> <b>–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—É—é/—Ñ–æ—Ä—É–º-–≤–µ—Ç–∫—É. "
                    "–í—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É –≤ –æ–±—ã—á–Ω–æ–º —á–∞—Ç–µ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π —Ç–µ–º—É.</b>"
                )
            else:
                await message.respond(f"<b>–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}</b>")
